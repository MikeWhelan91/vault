// Vault - Zero-Knowledge Encrypted Storage
// Database schema for user accounts and metadata

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Cryptographic data (wrapped keys, salts)
  dataKeySalt       String // hex-encoded salt for master key derivation
  wrappedDataKey    String // hex-encoded wrapped data key
  wrappedDataKeyIV  String // hex-encoded IV for wrapped data key

  // Subscription tier
  tier String @default("free") // 'free' | 'plus'

  // Grace period tracking (for downgraded users)
  gracePeriodEndsAt DateTime? // When excess data will be deleted (null if not in grace period)

  // Storage tracking
  totalSize    BigInt @default(0) // bytes used
  storageLimit BigInt @default(314572800) // 300MB default for free tier (2GB for plus)

  // Relations
  items           Item[]
  releaseBundles  ReleaseBundle[]
  heartbeat       Heartbeat?
  scheduledLetters ScheduledLetter[]
  pushTokens      PushToken[]
  passwords       Password[]
  emergencyAccess EmergencyAccess[]
  digitalAssets   DigitalAsset[]
  videoMessages   VideoMessage[]

  @@index([email])
}

// Encrypted items (files, notes, passwords, cards)
model Item {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type      String   // 'file' | 'note' | 'password' | 'card' | 'secure_note'
  name      String
  size      BigInt   // encrypted size in bytes
  version   Int      @default(1)

  // Storage location (for files and notes)
  r2Key     String?  // path in R2: userId/itemId/version.bin (null for password/card types)

  // Cryptographic data
  itemKeySalt       String // hex-encoded salt
  wrappedItemKey    String // hex-encoded wrapped item key
  wrappedItemKeyIV  String // hex-encoded IV

  // Password-specific fields (for type='password', 'card', 'secure_note')
  url               String?  // Website URL (for passwords)
  username          String?  // Username/email (for passwords)
  favorite          Boolean  @default(false) // For passwords
  lastUsed          DateTime? // For passwords

  // Encrypted password data
  passwordEncrypted String? // The actual password/PIN
  passwordIV        String? // IV for password decryption

  // Card-specific encrypted fields
  cardNumberEncrypted String? // Card number
  cardExpiryEncrypted String? // Expiry date
  cardCVVEncrypted    String? // CVV
  cardCVVIV           String? // IV for CVV decryption

  // Notes/additional data
  notesEncrypted    String? // Additional notes
  notesIV           String? // IV for notes decryption

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bundleItems BundleItem[]

  @@index([userId])
  @@index([userId, updatedAt])
  @@index([userId, type])
  @@index([userId, favorite])
}

// Password Vault - encrypted password storage
model Password {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String   // e.g., "Gmail", "Bank of America"
  category  String   @default("other") // 'login', 'card', 'identity', 'secure_note', 'other'
  favorite  Boolean  @default(false)

  // URLs and identifiers
  url       String?  // Website URL
  username  String?  // Encrypted username/email

  // Encrypted fields (all stored encrypted)
  passwordEncrypted String  // The actual password
  passwordIV        String  // IV for password decryption

  notesEncrypted    String? // Additional notes
  notesIV           String? // IV for notes decryption

  // Optional fields for different types
  cardNumberEncrypted String? // For credit cards (last 4 digits could be shown)
  cardExpiryEncrypted String?
  cardCVVEncrypted    String?
  cardCVVIV           String?

  // Cryptographic data (same pattern as Items)
  passwordKeySalt    String // hex-encoded salt
  wrappedPasswordKey String // hex-encoded wrapped key
  wrappedPasswordKeyIV String // hex-encoded IV

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastUsed  DateTime? // Track when password was last accessed

  // Relations
  emergencyAccess EmergencyAccess[]

  @@index([userId])
  @@index([userId, category])
  @@index([userId, favorite])
  @@index([userId, updatedAt])
}

// Emergency Access for Password Vault
model EmergencyAccess {
  id        String   @id @default(cuid())
  userId    String   // Owner of the passwords
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  trusteeEmail String
  trusteeName  String?

  accessLevel  String   @default("view") // 'view' | 'takeover'
  waitTimeDays Int      @default(7) // Days to wait before granting access

  status       String   @default("pending") // 'pending', 'active', 'requested', 'granted', 'denied'

  requestedAt  DateTime? // When trustee requested access
  grantedAt    DateTime? // When access was granted
  deniedAt     DateTime? // If owner denied the request

  inviteToken  String?   @unique // Token for trustee to accept invitation
  acceptedAt   DateTime? // When trustee accepted invitation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - which passwords this emergency contact can access
  passwords Password[]

  @@index([userId])
  @@index([trusteeEmail])
  @@index([status])
  @@index([inviteToken])
}

// Digital Asset Inventory
model DigitalAsset {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String   // e.g., "Wells Fargo Checking", "Facebook Account"
  category  String   // 'financial', 'social_media', 'subscription', 'email', 'domain', 'crypto', 'cloud_storage', 'other'
  platform  String?  // e.g., "Chase Bank", "Instagram", "Netflix"

  // Account details (encrypted)
  accountNumberEncrypted String? // Account number, username, or identifier
  accountNumberIV        String?

  url       String?  // Website/app URL

  // Instructions for beneficiaries (encrypted)
  instructionsEncrypted String? // "Delete this account", "Archive", "Transfer to..."
  instructionsIV        String?

  // Value estimation (optional)
  estimatedValue Decimal? @db.Decimal(12, 2) // USD value
  valueCurrency  String?  @default("USD")

  // Important dates
  renewalDate    DateTime? // For subscriptions
  expirationDate DateTime? // For domains, etc.

  // Status
  status    String  @default("active") // 'active', 'archived', 'closed'
  important Boolean @default(false) // Flag high-priority assets

  // Cryptographic data
  assetKeySalt    String // hex-encoded salt
  wrappedAssetKey String // hex-encoded wrapped key
  wrappedAssetKeyIV String // hex-encoded IV

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, category])
  @@index([userId, status])
  @@index([renewalDate])
}

// Video Messages
model VideoMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String   // e.g., "18th Birthday Message for Sarah"
  category  String   @default("personal") // 'birthday', 'wedding', 'graduation', 'anniversary', 'general', 'guided_memory'

  // Storage
  r2Key     String   // path in R2
  duration  Int      // seconds
  size      BigInt   // bytes
  thumbnail String?  // R2 key for thumbnail image

  // Trigger conditions
  triggerType  String?  // 'date', 'age', 'event', 'manual'
  triggerDate  DateTime? // Specific date
  recipientName String? // For age-based triggers
  recipientAge  Int?    // Release when recipient turns this age

  // Guided memory prompts (if applicable)
  promptQuestion String? // "What's your biggest life lesson?"

  // Release status
  released   Boolean  @default(false)
  releasedAt DateTime?

  // Encryption
  videoKeySalt    String
  wrappedVideoKey String
  wrappedVideoKeyIV String

  // Relations
  recipients VideoRecipient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, category])
  @@index([triggerDate])
  @@index([released])
}

// Recipients for video messages
model VideoRecipient {
  id        String   @id @default(cuid())
  videoId   String
  video     VideoMessage @relation(fields: [videoId], references: [id], onDelete: Cascade)

  email     String
  name      String?

  notified  Boolean  @default(false)
  viewedAt  DateTime?

  createdAt DateTime @default(now())

  @@index([videoId])
  @@index([email])
}

// Release bundles (time-lock or heartbeat)
model ReleaseBundle {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  mode      String   // 'time-lock' | 'heartbeat' | 'life-event'

  // Life Event Triggers (new feature)
  lifeEventType      String? // 'birthday', 'age_milestone', 'anniversary', 'recurring_annual', 'custom_date'
  recipientName      String? // Name of person for age-based triggers
  recipientBirthdate DateTime? // For calculating age
  targetAge          Int? // Release when recipient turns this age
  recurringMonth     Int? // For annual recurring (1-12)
  recurringDay       Int? // For annual recurring (1-31)
  customEventDate    DateTime? // For one-time custom events

  // Conditional release (Plus feature)
  conditionalRelease Boolean @default(false)
  conditionType      String? // 'all' | 'any' | 'count'
  conditionCount     Int?    // For 'count' type: how many trustees must confirm

  // Time-lock specific
  releaseDate DateTime?

  // Heartbeat specific (per-bundle check-ins)
  heartbeatCadenceDays Int?
  lastHeartbeat        DateTime?
  nextHeartbeat        DateTime? // When next check-in is due for this bundle
  heartbeatPaused      Boolean  @default(false)
  heartbeatPausedAt    DateTime?

  // Status
  released    Boolean  @default(false)
  releaseToken String?  @unique
  firstAccessedAt DateTime? // When a trustee first accessed this bundle (starts 24hr timer)

  // Bundle note (encrypted with bundle key for trustee access)
  bundleNoteEncrypted String? // Encrypted note content (hex-encoded)
  bundleNoteIV        String? // IV for note encryption (hex-encoded)

  // Custom email message (optional, sent in release email to trustees)
  includeEmailMessage Boolean @default(false)
  emailMessageEncrypted String? // Encrypted email message (hex-encoded)
  emailMessageIV        String? // IV for email message decryption (hex-encoded)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bundleItems BundleItem[]
  trustees    Trustee[]

  @@index([userId])
  @@index([releaseDate])
  @@index([released])
  @@index([mode, released, nextHeartbeat]) // For efficient heartbeat deadline checks
}

// Junction table for bundles and items
model BundleItem {
  id       String @id @default(cuid())
  bundleId String
  bundle   ReleaseBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  // Bundle-wrapped keys for trustee access (hex-encoded)
  // These allow trustees to decrypt items without the owner's data key
  bundleWrappedKey   String? // Item key wrapped with bundle key
  bundleWrappedKeyIV String? // IV for unwrapping

  createdAt DateTime @default(now())

  @@unique([bundleId, itemId])
  @@index([bundleId])
  @@index([itemId])
}

// Trustees for release bundles
model Trustee {
  id       String @id @default(cuid())
  bundleId String
  bundle   ReleaseBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  email    String
  name     String?

  // Notification status
  notified Boolean @default(false)
  accessedAt DateTime?

  // Conditional release confirmation
  confirmed Boolean @default(false)
  confirmedAt DateTime?

  createdAt DateTime @default(now())

  @@index([bundleId])
  @@index([email])
}

// Heartbeat tracking
model Heartbeat {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  enabled          Boolean @default(false)
  cadenceDays      Int     @default(30)
  lastHeartbeat    DateTime?
  nextHeartbeat    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([nextHeartbeat])
  @@index([enabled, nextHeartbeat])
}

// Scheduled letters (Plus feature)
model ScheduledLetter {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String
  recipient String   // Email address
  recipientName String?

  // Scheduling
  scheduleType  String   // 'date' | 'birthday' | 'anniversary' | 'yearly'
  scheduleDate  DateTime // When to send
  yearlyMonth   Int?     // For yearly: month (1-12)
  yearlyDay     Int?     // For yearly: day (1-31)

  // Content (stored as plain text for email sending)
  letterContent String @db.Text @default("") // Letter content to be sent via email

  // Status
  sent      Boolean   @default(false)
  sentAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([scheduleDate])
  @@index([sent, scheduleDate])
}

// Push notification tokens for mobile devices
model PushToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  token     String   // FCM token (Android) or APNs token (iOS)
  platform  String   // 'android' | 'ios'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, token]) // Prevent duplicate tokens
  @@index([userId])
  @@index([platform])
}
