// Vault - Zero-Knowledge Encrypted Storage
// Database schema for user accounts and metadata

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Cryptographic data (wrapped keys, salts)
  dataKeySalt       String // hex-encoded salt for master key derivation
  wrappedDataKey    String // hex-encoded wrapped data key
  wrappedDataKeyIV  String // hex-encoded IV for wrapped data key

  // Subscription tier
  tier String @default("free") // 'free' | 'plus'

  // Grace period tracking (for downgraded users)
  gracePeriodEndsAt DateTime? // When excess data will be deleted (null if not in grace period)

  // Storage tracking
  totalSize    BigInt @default(0) // bytes used
  storageLimit BigInt @default(314572800) // 300MB default for free tier (2GB for plus)

  // Relations
  items           Item[]
  releaseBundles  ReleaseBundle[]
  heartbeat       Heartbeat?
  scheduledLetters ScheduledLetter[]

  @@index([email])
}

// Encrypted items (files & notes)
model Item {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type      String   // 'file' | 'note'
  name      String
  size      BigInt   // encrypted size in bytes
  version   Int      @default(1)

  // Storage location
  r2Key     String   // path in R2: userId/itemId/version.bin

  // Cryptographic data
  itemKeySalt       String // hex-encoded salt
  wrappedItemKey    String // hex-encoded wrapped item key
  wrappedItemKeyIV  String // hex-encoded IV

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bundleItems BundleItem[]

  @@index([userId])
  @@index([userId, updatedAt])
}

// Release bundles (time-lock or heartbeat)
model ReleaseBundle {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  mode      String   // 'time-lock' | 'heartbeat'

  // Conditional release (Plus feature)
  conditionalRelease Boolean @default(false)
  conditionType      String? // 'all' | 'any' | 'count'
  conditionCount     Int?    // For 'count' type: how many trustees must confirm

  // Time-lock specific
  releaseDate DateTime?

  // Heartbeat specific
  heartbeatCadenceDays Int?
  lastHeartbeat        DateTime?
  heartbeatPaused      Boolean  @default(false)
  heartbeatPausedAt    DateTime?

  // Status
  released    Boolean  @default(false)
  releaseToken String?  @unique
  firstAccessedAt DateTime? // When a trustee first accessed this bundle (starts 24hr timer)

  // Bundle note (encrypted with bundle key for trustee access)
  bundleNoteEncrypted String? // Encrypted note content (hex-encoded)
  bundleNoteIV        String? // IV for note encryption (hex-encoded)

  // Custom email message (optional, sent in release email to trustees)
  includeEmailMessage Boolean @default(false)
  emailMessageEncrypted String? // Encrypted email message (hex-encoded)
  emailMessageIV        String? // IV for email message decryption (hex-encoded)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bundleItems BundleItem[]
  trustees    Trustee[]

  @@index([userId])
  @@index([releaseDate])
  @@index([released])
}

// Junction table for bundles and items
model BundleItem {
  id       String @id @default(cuid())
  bundleId String
  bundle   ReleaseBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  // Bundle-wrapped keys for trustee access (hex-encoded)
  // These allow trustees to decrypt items without the owner's data key
  bundleWrappedKey   String? // Item key wrapped with bundle key
  bundleWrappedKeyIV String? // IV for unwrapping

  createdAt DateTime @default(now())

  @@unique([bundleId, itemId])
  @@index([bundleId])
  @@index([itemId])
}

// Trustees for release bundles
model Trustee {
  id       String @id @default(cuid())
  bundleId String
  bundle   ReleaseBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  email    String
  name     String?

  // Notification status
  notified Boolean @default(false)
  accessedAt DateTime?

  // Conditional release confirmation
  confirmed Boolean @default(false)
  confirmedAt DateTime?

  createdAt DateTime @default(now())

  @@index([bundleId])
  @@index([email])
}

// Heartbeat tracking
model Heartbeat {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  enabled          Boolean @default(false)
  cadenceDays      Int     @default(30)
  lastHeartbeat    DateTime?
  nextHeartbeat    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([nextHeartbeat])
  @@index([enabled, nextHeartbeat])
}

// Scheduled letters (Plus feature)
model ScheduledLetter {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String
  recipient String   // Email address
  recipientName String?

  // Scheduling
  scheduleType  String   // 'date' | 'birthday' | 'anniversary' | 'yearly'
  scheduleDate  DateTime // When to send
  yearlyMonth   Int?     // For yearly: month (1-12)
  yearlyDay     Int?     // For yearly: day (1-31)

  // Content (stored as plain text for email sending)
  letterContent String @db.Text @default("") // Letter content to be sent via email

  // Status
  sent      Boolean   @default(false)
  sentAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([scheduleDate])
  @@index([sent, scheduleDate])
}
